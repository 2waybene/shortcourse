relation.GBE
system.time (
relation.GBE = min_best_cosim(as.numeric(as.numeric(GBE.combined.spectrum ) ),cosmic.wes.sbs)
)
system.time (
relation.GBE = min_best_cosim(as.numeric(GBE.combined.spectrum),cosmic.wes.sbs)
)
as.numeric(GBE.combined.spectrum )
system.time (
relation.GBE = min_best_cosim(as.numeric(GBE.combined.spectrum ),cosmic.wes.sbs)
)
relation.GBE = min_best_cosim(as.numeric(GBE.combined.spectrum ),cosmic.wes.sbs)
relation.GBE
cos_sim ( relation.GBE, cosmic.wes.sbs[,1])
cosmic.wes.sbs[,1]
cos_sim ( as.numeric(reconstructed ), cosmic.wes.sbs[,1])
cos_sim ( as.numeric(relation.GBE  ), cosmic.wes.sbs[,1])
as.numeric(relation.GBE  )
cos_sim ( as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,1])
system.time(cos_sim ( as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,1]))
library(parallel)
library(foreach)
library(doParallel)
numCores <- detectCores()/2
# numCores <- detectCores() - 5
cl <<- parallel::makeCluster(numCores)
on.exit(stopCluster(cl))
on.exit(stopImplicitCluster())
on.exit(registerDoSEQ())
doParallel::registerDoParallel(cl)
stopCluster(cl)
cl
doParallel::registerDoParallel(cl)
correlations <- foreach (i=1:dim(cosmic.wes.sbs), .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,1])
}
stopCluster(cl)
doParallel::registerDoParallel(cl)
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
stopCluster(cl)
correlations
i
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
doParallel::registerDoParallel(cl)
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
stopCluster(cl)
library(parallel)
library(foreach)
library(doParallel)
numCores <- detectCores()/2
cl <<- parallel::makeCluster(numCores)
source("x:/project2020/exomeSeq/scripts/helpers/cosmicUtils.R")
##============================
create.snv.context <- function (feedInfo)
{
context <- c()
for (i in 1:dim(dat[,c(1:2)])) {
part1 <- gsub (">", "", as.character(dat[,1]))[i]
part2 <- as.character(dat[,2]) [i]
substr (part2, 2, 2 ) <- "."
endproduct <- paste (part1, part2, sep=" ")
context <- c(context, endproduct)
}
return (context)
}
modify.snv.context <- function (aVec)
{
#  aVec <- rownames(mut_mat)
context <- c()
for (i in 1:length(aVec)) {
chars <- strsplit (aVec[i], "")[[1]]
part1 <- paste (chars[3], chars[5], sep="")
part2 <- paste (chars[1], ".",  chars[7], sep="")
endproduct <- paste (part1, part2, sep=" ")
context <- c(context, endproduct)
}
return (context)
}
##============================
#upload 30 cosmic signatures
##============================
sp_url <- paste("http://cancer.sanger.ac.uk/cancergenome/assets/","signatures_probabilities.txt", sep = "")
cancer_signatures = read.table(sp_url, sep = "\t", header = TRUE)
cancer_signatures = cancer_signatures[order(cancer_signatures[,1]),]
cancer_signatures = as.matrix(cancer_signatures[,4:33])
rownames(cancer_signatures)
##=====================================
##  Current cosmic signatures WES
##=====================================
dat <- read.csv("x:/project2020/exomeSeq/cosmic-related/sigProfiler_exome_SBS_signatures.csv", header = TRUE)
dim(dat)
cosmic.wes.sbs <-  as.matrix(dat[,-c(1:2)])
h <- create.snv.context(dat[,c(1:2)])
rownames(cosmic.wes.sbs) <- h
colnames(cosmic.wes.sbs)
str(cosmic.wes.sbs)
rownames(cosmic.wes.sbs)
##=====================================
##  Current cosmic signatures WES
##  as of May 22nd, 2019
##=====================================
dat <- read.csv("x:/project2020/exomeSeq/cosmic-related/sigProfiler_SBS_signatures_2019_05_22.csv", header = TRUE)
dim(dat)
cosmic.wgs.sbs <-  as.matrix(dat[,-c(1:2)])
h <- create.snv.context(dat[,c(1:2)])
rownames(cosmic.wgs.sbs) <- h
rownames(cosmic.wgs.sbs)
colnames(cosmic.wgs.sbs)
str(cosmic.wgs.sbs)
fileExt  = "_finalSNV.vcf_VAF10.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/gtx/BROMODICHLOROACETIC-ACID-_BDCA/_3nMore/MutSig/VAF10/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
h <- modify.snv.context(rownames(mut_mat))
rownames(mut_mat) = h
rownames(mut_mat) == rownames(cosmic.wes.sbs)
fileExt  = "_finalSNV.vcf_VAF10.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF10/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
colSums(mut_mat)
rownames(mut_mat) = h
SponM.combined.spectrum = rowSums(mut_mat)
fileExt  = "_finalSNV.vcf_VAF10.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/gtx/GINKGO/_3nMore/MutSig/VAF10/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
colSums(mut_mat)
rownames(mut_mat) = h
GBE.combined.spectrum = rowSums(mut_mat)
cos_sim ( as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,1])
cos_sim ( as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,1])
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
library(doParallel)
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
correlations
stopCluster(cl)
doParallel::registerDoParallel(cl)
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
stopCluster(cl)
registerDoParallel(cl)
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
stopCluster(cl)
cl <<- parallel::makeCluster(numCores)
registerDoParallel(cl)
correlations <- foreach (i=1:dim(cosmic.wes.sbs)[2], .combine = "rbind") %dopar% {
cos_sim (as.numeric(GBE.combined.spectrum ), cosmic.wes.sbs[,i])
}
stopCluster(cl)
colnames(cosmic.wes.sbs)
names(correlations)
names(correlations) <- colnames(cosmic.wes.sbs)
correlations
cbind (colnames(cosmic.wes.sbs), as.vector(correlations))
GBE.correlations <- as.data.frame(cbind (colnames(cosmic.wes.sbs), as.vector(correlations)))
colnames(GBE.correlations)
colnames(GBE.correlations) <- c ("COSMIC_WES_Signature", "Cosine_correlation")
GBE.correlations
as.numeric(GBE.combined.spectrum)
as.numeric(GBE.combined.spectrum)/sum(GBE.combined.spectrum)
system.time (
relation.GBE = min_best_cosim(as.numeric(GBE.combined.spectrum)/sum(GBE.combined.spectrum),cosmic.wes.sbs)
)
i
system.time ({
relation.GBE = min_best_cosim(as.numeric(GBE.combined.spectrum)/sum(GBE.combined.spectrum),cosmic.wes.sbs)
}  )
install.packages("rms")
sample1.df <- read.table ("http://www.unt.edu/rss/class/Jon/R_SC/Module9/CrossValidation/cv_sample1.df.txt", header= TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
head(sample1.df)
summary(sample1.df)
library(rms)
model.1 <- ols ( y ~ x1 + x2 +x3 + x4 +x5 +x6 +x7, sample1.df, x = TRUE, y=TRUE)
##==================================================
library(BSgenome)
ref_genome <-  "BSgenome.Mmusculus.UCSC.mm10"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
##===========================
fileExt  = "_finalSNV.vcf"
inputDir = "x:/project2020/exomeSeq/exonCodingOnly/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files
sample <- "x:/project2020/exomeSeq/exonCodingOnly/Sample_DS-251144_finalSNV.vcf"
##===========================
fileExt  = "_nonSym.vcf"
inputDir = "x:/project2020/exomeSeq/exonCodingOnly/SnpEff"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files
fileExt  = "_finalSNV.vcf_VAF05.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF05/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files
##===========================
fileExt  = "_finalSNV.vcf_VAF10.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF10/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files
sample <- NULL
sample[1] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF05/Sample_DS-251114_finalSNV.vcf_VAF05.vcf"
sample[2] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF10/Sample_DS-251114_finalSNV.vcf_VAF10.vcf"
sample[3] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF15/Sample_DS-251114_finalSNV.vcf_VAF15.vcf"
sample[4] <- "x:/project2020/exomeSeq/exonCodingOnly/Sample_DS-251144_finalSNV.vcf"
sample[5] <- "x:/project2020/exomeSeq/exonCodingOnly/SnpEff/Sample_DS-251114_nonSym.vcf"
sample[6] <- "x:/project2020/exomeSeq/exonCodingOnly/homopolymerRelated/Sample_DS-251144_finalSNV.vcf"
sample
sample_names <- c ("VCF05", "VCF10","VCF15","CDS", "CDS_nonSym", "HomoPly", )
sample_names <- c ("VCF05", "VCF10","VCF15","CDS", "CDS_nonSym", "HomoPly")
vcfs <- read_vcfs_as_granges(sample, sample_names, ref_genome)
read.table (sample[6])
read.table (file = sample[6] , header = TRUE)
sample[6]
sample <- NULL
sample[1] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF05/Sample_DS-251114_finalSNV.vcf_VAF05.vcf"
sample[2] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF10/Sample_DS-251114_finalSNV.vcf_VAF10.vcf"
sample[3] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF15/Sample_DS-251114_finalSNV.vcf_VAF15.vcf"
sample[4] <- "x:/project2020/exomeSeq/exonCodingOnly/Sample_DS-251144_finalSNV.vcf"
sample[5] <- "x:/project2020/exomeSeq/exonCodingOnly/SnpEff/Sample_DS-251114_nonSym.vcf"
sample[6] <- "x:/project2020/exomeSeq/homopolymerRelated/Sample_DS-251144_finalSNV.vcf"
sample_names <- c ("VCF05", "VCF10","VCF15","CDS", "CDS_nonSym", "HomoPly")
vcfs <- read_vcfs_as_granges(sample, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
plot_96_profile(mut_mat)
rowSums(mut_mat)
colSums(mut_mat)
##  compare to homopolymer
##=============================
sample <- NULL
sample[1] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/Sample_DS-251114_finalSNV.vcf"
sample[2] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF01/Sample_DS-251114_finalSNV.vcf_VAF01.vcf"
sample[3] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF05/Sample_DS-251114_finalSNV.vcf_VAF05.vcf"
sample[4] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF10/Sample_DS-251114_finalSNV.vcf_VAF10.vcf"
sample[5] <-"x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/MutSig/VAF15/Sample_DS-251114_finalSNV.vcf_VAF15.vcf"
sample[6] <- "x:/project2020/exomeSeq/exonCodingOnly/Sample_DS-251144_finalSNV.vcf"
sample[7] <- "x:/project2020/exomeSeq/exonCodingOnly/SnpEff/Sample_DS-251114_nonSym.vcf"
sample[8] <- "x:/project2020/exomeSeq/homopolymerRelated/Sample_DS-251144_finalSNV.vcf"
sample_names <- c ("Raw", "VCF01", "VCF05", "VCF10","VCF15","CDS", "CDS_nonSym", "HomoPly")
vcfs <- read_vcfs_as_granges(sample, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
rowSums(mut_mat)
colSums(mut_mat)
##=======================================
fileExt  = "_finalSNV.vcf"
inputDir = "x:/project2020/exomeSeq/homopolymerRelated/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
CDS.snv <- rowSums(mut_mat)
colSums(mut_mat)
##=======================================
fileExt  = "_finalSNV.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/spon/male/_3nMore/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
plot_96_profile(mut_mat)
colSums(mut_mat)
install.packages(c("hash", "RMySQL"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ROntoTools")
bioconductorPkg <- c("GenSA", "BSgenome", "DESeq2","BiocStyle", "GEOquery","mouse4302.db","affycoretools","BSgenome.Mmusculus.UCSC.mm10",
"ref_genome", "MutationalPatterns", "BSgenome", "SomaticSignatures", "SomaticCancerAlterations", "BSgenome.Hsapiens.1000genomes.hs37d5",
"datatable","topGO","EDASeq","org.Mm.eg.db","BioStyle","ROntoTools")
bioconductorPkg
kegg.out
library(affy);
library(limma);
library(affycoretools)
library(annotate)
library(mouse4302.db)
##=================================================
##  functions
##=================================================
affyProb2Symbols <- function (aListOfProbes, db = mouse4302.db)
{
require(magrittr)
require(mouse4302.db)
probeAnnoted <- AnnotationDbi::select(
x       = db,
keys    = aListOfProbes,
columns = c("PROBEID", "ENSEMBL", "ENTREZID", "SYMBOL"),
keytype = "PROBEID"
)
return (probeAnnoted )
}
kegg.results <- read.csv("x:/project2019/SEM/IPA/KEGG_analysis/kegg_28_pathways.csv", header = TRUE)
dim(kegg.results)
str(kegg.results)
head(kegg.results)
probe.ids <- strsplit (as.character(kegg.results$Genes[1]), ",")
probe.ids
dim(kegg.results)
kegg.out
kegg.results
keggSymbols <- c()
for (i in 1:length(r))
{
keggSymbols [i] <- toupper(paste (r[[i]], collapse = ","))
}
length(r)
setwd("x:/project2016/woychik-ma-rnaseq/comparison/")
library(rmarkdown)
library(knitr)
render("x:/project2016/woychik-ma-rnaseq/scripts/comparing_DEGs_v1.rmd",
output_file = "x:/project2016/woychik-ma-rnaseq/comparison/comparing_DEGs_v1.html")
# This produce GSA analysis using the original 16 gene sets from David
render("GSA_4_Chen_data2_invest.rmd",  params = list(dbFile = "cleaningData/Knowledge_based_gene_sets_20140627.gmt"),
output_file = "GSA_4_Chen_data1_orig.html")
setwd("X:/project2016/GSA_by_R")
# This produce GSA analysis using the original 16 gene sets from David
render("GSA_4_Chen_data2_invest.rmd",  params = list(dbFile = "cleaningData/Knowledge_based_gene_sets_20140627.gmt"),
output_file = "GSA_4_Chen_data1_orig.html")
BiocManager::instal("samr")
BiocManager::install("samr")
# This produce GSA analysis using the original 16 gene sets from David
render("GSA_4_Chen_data2_invest.rmd",  params = list(dbFile = "cleaningData/Knowledge_based_gene_sets_20140627.gmt"),
output_file = "GSA_4_Chen_data1_orig.html")
# Load packages
library(samr)
library(GSA)
#setwd("/Users/jianyingli/GSA_R/")
setwd("x:/project2016/GSA_by_R/")
x1 <- read.csv("NormedMicroarray.csv")
# check data
str(x1)
str(matrix(rnorm(1000*9),ncol=9))
x <- x1[3:10]
y <- c(rep(1, 4), rep(2, 4))
y
samfit <- SAM(x, y, resp.type = "Two class unpaired")
x
y
dim(x)
samfit <- SAM(x, y, resp.type = "Two class unpaired")
samfit <- SAM(as.matrix(x), y, resp.type = "Two class unpaired")
z <- x1
str(z)
#Make "Gene name" as string
z$X <- as.character(z$X)
str(z)
#Make "Gene symbol"" as string
z$GeneSymbol <- as.character(z$GeneSymbol)
str(z)
data <- list(x = x, y = y, geneid = z$X, genenames = z$GeneSymbol, logged2 = TRUE)
length(z$GeneSymbol)
#There are many duplicated Gene Symbols
length(unique(z$GeneSymbol))
## Setting the random seed for future validation
set.seed(1234567)
clean.gmt.data <- function (db)
{
# db <- c1
# str(db)
# db$geneset.names
# db$geneset.descriptions
temp.geneset <- c(list())
for (i in 1:length(db$genesets))
{
temp.geneset[[i]] <- db$genesets[[i]]
if (length(which(temp.geneset[[i]]=="")) > 0 )
{
temp.geneset[[i]]  <- temp.geneset[[i]][-which(temp.geneset[[i]]=="")]
}
}
db$genesets <- temp.geneset
return (db)
}
## Rename "Knowledge based gene sets (20161005).gmt" to geneset_2.gmt
#c1 <- GSA.read.gmt("genset_2.gmt")
# original file
c1 <- GSA.read.gmt("Knowledge_based_gene_sets_20161005.gmt")
#c1 <- GSA.read.gmt("cleaningData/genset_2_correct.txt")
#c1 <- GSA.read.gmt("cleaningData/genset_2_correct_from_1.txt")
#c1 <- GSA.read.gmt("cleaningData/genset_2.txt")
# GSA.read.gmt constructs a list of 3
c1.cleaned <- clean.gmt.data(c1)
str(c1)
str(c1$genesets)
print ("Gene sets in database file (20161005).gmt")
c1$geneset.names
c1 <- c1.cleaned
gsafit <- GSA(x, y, c1$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
c1 <- c1.cleaned
gsafit <- GSA(as.matrix(x), y, c1$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
## Do I need the unique gene symbol??
#gsafit <- GSA(x, y, c1$genesets, unique(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
str(gsafit)
plot(gsafit$GSA.scores)
# This produce GSA analysis using the original 16 gene sets from David
render("GSA_4_Chen_data2_invest.rmd",  params = list(dbFile = "cleaningData/Knowledge_based_gene_sets_20140627.gmt"),
output_file = "GSA_4_Chen_data1_orig.html")
# This produce GSA analysis using the original 16 gene sets from David
render("GSA_4_Chen_data2_invest.rmd",  params = list(dbFile = "cleaningData/Knowledge_based_gene_sets_20140627.gmt"),
output_file = "GSA_4_Chen_data1_orig.html")
library(Biobase)
library(GEOquery)
gset <- getGEO("GSE5281", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# set parameters and draw the plot
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE5281", '/', annotation(gset), " selected samples", sep ='')
boxplot(exprs(gset), boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
gset <- getGEO("GSE18842", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# set parameters and draw the plot
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE18842", '/', annotation(gset), " selected samples", sep ='')
boxplot(exprs(gset), boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
str(exprs(gset))
sampleNames(gset)
str(gset)
gset <- getGEO("GSE18842", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE18842", '/', annotation(gset), " selected samples", sep ='')
boxplot(exprs(gset), boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
##==================================================
library(BSgenome)
ref_genome <-  "BSgenome.Mmusculus.UCSC.mm10"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
##  Mutect 2 call
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/PON/male/_3nMore/MutSig/"
fileExt  = "_finalSNV.vcf"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
plot_96_profile(mut_mat)
str(rowSums(mut_mat)/10)
sum.dm <- cbind (mut_mat, as.vector(t(rowSums(mut_mat)/10)))
colnames(sum.dm)[11] <- "Sum"
plot_96_profile(sum.dm)
plot_96_profile(mut_mat)
sample_names
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/PON/male/_3nMore/MutSig/"
fileExt  = "_finalSNV.vcf"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files.1 <- vcf_files [c(1:3)]
sample_names <- paste ("ReSeq_",  gsub (fileExt , "", gsub (paste (inputDir, "batch3_Sample_", sep="") , "", vcf_files.1)), sep="")
vcfs <- read_vcfs_as_granges(vcf_files.1, sample_names, ref_genome)
mut_mat.1 <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
plot_96_profile(mut_mat.1)
vcf_files.2 <- vcf_files [c(7:9)]
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files.2))
vcfs <- read_vcfs_as_granges(vcf_files.2, sample_names, ref_genome)
mut_mat.2 <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
plot_96_profile(mut_mat.2)
vcf_files.3 <- vcf_files [c(4:13)]
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files.3))
vcfs <- read_vcfs_as_granges(vcf_files.3, sample_names, ref_genome)
mut_mat.3 <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
plot_96_profile(mut_mat.3)
mut_mat <- cbind (mut_mat.1 , mut_mat.2)
colnames(mut_mat)
plot_96_profile(mut_mat)
colnames(mut_mat)
mut_mat_sorted <- mut_mat [,c(1,4,2,5,3,6)]
colnames(mut_mat_sorted)
colnames(mut_mat_sorted) <- c ("DS-251190", "DS-251190R","DS-252817", "DS-252817R","DS-252826", "DS-252826R")
colnames(mut_mat_sorted)
plot_96_profile(mut_mat_sorted)
colnames(mut_mat.3)
plot_96_profile(mut_mat.2)
plot_96_profile(mut_mat.1)
colnames(mut_mat)
mut_mat_sorted <- mut_mat [,c(4,1,5,2,6,3)]
colnames(mut_mat_sorted) <- c ("DS-251190", "DS-251190R","DS-252817", "DS-252817R","DS-252826", "DS-252826R")
plot_96_profile(mut_mat_sorted)
rowSums(mut_mat)
colSums(mut_mat.3)
colSums(mut_mat_sorted)
