###################################################
peRes <- pe(x = fc, graphs = kpg, ref = ref,  nboot = 200, verbose = FALSE)
###################################################
### code chunk number 15: rontotools.Rnw:182-186
###################################################
head(Summary(peRes))
head(Summary(peRes, pathNames = kpn, totalAcc = FALSE, totalPert = FALSE,
pAcc = FALSE, pORA = FALSE, comb.pv = NULL, order.by = "pPert"))
###################################################
### code chunk number 16: peRes_twoway1
###################################################
plot(peRes)
###################################################
### code chunk number 17: peRes_twoway2
###################################################
plot(peRes, c("pAcc", "pORA"), comb.pv.func = compute.normalInv, threshold = .01)
###################################################
### code chunk number 18: fig1
###################################################
plot(peRes)
###################################################
### code chunk number 19: fig2
###################################################
plot(peRes, c("pAcc", "pORA"), comb.pv.func = compute.normalInv, threshold = .01)
###################################################
### code chunk number 20: pePathway_twoway_Acc
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "two.way")
###################################################
### code chunk number 21: pePathway_boot_Acc
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "boot")
###################################################
### code chunk number 22: fig3
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "two.way")
###################################################
### code chunk number 23: fig4
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "boot")
###################################################
### code chunk number 24: pePathway_graph_Pert
###################################################
p <- peRes@pathways[["path:hsa05216"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
###################################################
### code chunk number 25: pePathway_graph_Pert2
###################################################
p <- peRes@pathways[["path:hsa04660"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
###################################################
### code chunk number 26: fig5
###################################################
p <- peRes@pathways[["path:hsa05216"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
###################################################
### code chunk number 27: fig6
###################################################
p <- peRes@pathways[["path:hsa04660"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
###################################################
### code chunk number 28: rontotools.Rnw:300-303
###################################################
require(graph)
require(ROntoTools)
kpg <- keggPathwayGraphs("hsa", verbose = FALSE)
###################################################
### code chunk number 7: rontotools.Rnw:94-95
###################################################
head(edgeData(kpg[["path:hsa04110"]], attr = "weight"))
###################################################
### code chunk number 7: rontotools.Rnw:94-95
###################################################
head(edgeData(kpg[["path:hsa04110"]], attr = "weight"))
###################################################
### code chunk number 1: rontotools.Rnw:55-58
###################################################
require(graph)
require(ROntoTools)
kpg <- keggPathwayGraphs("hsa", verbose = FALSE)
###################################################
### code chunk number 2: rontotools.Rnw:62-63 (eval = FALSE)
###################################################
## kpg <- keggPathwayGraphs("hsa", updateCache = TRUE, verbose = TRUE)
length(keggPathwayNames(organism = "hsa", updateCache = FALSE, verbose = TRUE))
#[1] 337
###################################################
### code chunk number 3: rontotools.Rnw:69-70
###################################################
head(names(kpg))
length(kpg)
#[1] 221
###################################################
### code chunk number 4: rontotools.Rnw:74-77
###################################################
kpg[["path:hsa04110"]]
head(nodes(kpg[["path:hsa04110"]]))
head(edges(kpg[["path:hsa04110"]]))
###################################################
### code chunk number 5: rontotools.Rnw:81-82
###################################################
head(edgeData(kpg[["path:hsa04110"]], attr = "subtype"))
###################################################
### code chunk number 6: rontotools.Rnw:86-90
###################################################
kpg <- setEdgeWeights(kpg, edgeTypeAttr = "subtype",
edgeWeightByType = list(activation = 1, inhibition = -1,
expression = 1, repression = -1),
defaultWeight = 0)
###################################################
### code chunk number 7: rontotools.Rnw:94-95
###################################################
head(edgeData(kpg[["path:hsa04110"]], attr = "weight"))
###################################################
### code chunk number 8: rontotools.Rnw:99-101
###################################################
kpn <- keggPathwayNames("hsa")
head(kpn)
length(kpn)
#[1] 337
kpn[which(names(kpn) %in% "path:hsa05216")]
###################################################
fc <- top$logFC[top$adj.P.Val <= .01]
names(fc) <- top$entrez[top$adj.P.Val <= .01]
pv <- top$P.Value[top$adj.P.Val <= .01]
names(pv) <- top$entrez[top$adj.P.Val <= .01]
head(fc)
head(pv)
colnames(top)
###################################################
### code chunk number 11: rontotools.Rnw:140-145
###################################################
fcAll <- top$logFC
names(fcAll) <- top$entrez
pvAll <- top$P.Value
names(pvAll) <- top$entrez
pvAll
fcAll
###################################################
### code chunk number 12: rontotools.Rnw:149-151
###################################################
ref <- top$entrez
head(ref)
###################################################
### code chunk number 13: rontotools.Rnw:163-165
###################################################
kpg <- setNodeWeights(kpg, weights = alphaMLG(pv), defaultWeight = 1)
head(nodeWeights(kpg[["path:hsa04110"]]))
###################################################
### code chunk number 14: rontotools.Rnw:177-178
###################################################
peRes <- pe(x = fc, graphs = kpg, ref = ref,  nboot = 200, verbose = FALSE)
###################################################
### code chunk number 15: rontotools.Rnw:182-186
###################################################
head(Summary(peRes))
###################################################
### code chunk number 15: rontotools.Rnw:182-186
###################################################
dim(Summary(peRes))
Summary(peRes)
head(Summary(peRes, pathNames = kpn, totalAcc = FALSE, totalPert = FALSE,
pAcc = FALSE, pORA = FALSE, comb.pv = NULL, order.by = "pPert"))
peSummary <- Summary(peRes, pathNames = kpn, totalAcc = FALSE, totalPert = FALSE,
pAcc = FALSE, pORA = FALSE, comb.pv = NULL, order.by = "pPert")
peSummary$pathNames
###################################################
### code chunk number 16: peRes_twoway1
###################################################
plot(peRes)
###################################################
### code chunk number 17: peRes_twoway2
###################################################
plot(peRes, c("pAcc", "pORA"), comb.pv.func = compute.normalInv, threshold = .01)
###################################################
### code chunk number 18: fig1
###################################################
plot(peRes)
###################################################
### code chunk number 19: fig2
###################################################
plot(peRes, c("pAcc", "pORA"), comb.pv.func = compute.normalInv, threshold = .01)
###################################################
### code chunk number 20: pePathway_twoway_Acc
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "two.way")
###################################################
### code chunk number 22: fig3
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "two.way")
###################################################
### code chunk number 24: pePathway_graph_Pert
###################################################
p <- peRes@pathways[["path:hsa05216"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
peSummary$pathNames
peSummary[13,]
###################################################
### p53 signaling pathway
###################################################
p <- peRes@pathways[["path:hsa04115"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
peSummary$pathNames
peSummary[13,]
write.table (peSummary$pathNames, file = "x:/project2019/RNAseqProj/ESCC/lungCancer/pathway.txt", sep = "\t")
write.table (peSummary$pathNames, file = "x:/project2019/RNAseqProj/ESCC/lungCancer/pathway.txt", sep = "\t", row.names = FALSE)
write.table (list (kegg = peSummary$pathNames), file = "x:/project2019/RNAseqProj/ESCC/lungCancer/pathway.txt", sep = "\t", row.names = FALSE)
write.table (list (KEGG = peSummary$pathNames), file = "x:/project2019/RNAseqProj/ESCC/lungCancer/pathway.txt", sep = "\t", row.names = FALSE)
peSummary[13,]
peSummary[67,]
peSummary[66,]
peSummary[106,]
p <- peRes@pathways[["path:hsa05222"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
p <- peRes@pathways[["path:hsa05223"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
###################################################
### Small cell lung cancer
###################################################
p <- peRes@pathways[["path:hsa05222"]]
g <- layoutGraph(p@map, layoutType = "dot")
graphRenderInfo(g) <- list(fixedsize = FALSE)
edgeRenderInfo(g) <- peEdgeRenderInfo(p)
nodeRenderInfo(g) <- peNodeRenderInfo(p)
renderGraph(g)
head(kpn)
length(kpn)
length(kph)
length(kpg)
peSummary
peSummary[66,]
peSummary[106,]
head(alphaMLG(top$adj.P.Val))
alphaMLG(top$adj.P.Val)
head(alpha1MR(top$adj.P.Val))
scatter.smooth(alphaMLG(top$adj.P.Val), alpha1MR(top$adj.P.Val))
library(graph)
V <- LETTERS[1:4]
g <- graphNEL(nodes = V, edgemode = "directed")
nodeWeights(g)
nodeWeights(g, "B")
nodeWeights(g, attr = "WT", default = 3)
dim(ex)
dim(ex)[1]
##===========================================================
##  NSCLC_used_in_Nguyen_2019.R
##  GEO_ID	Disease	Normal	Condition	Pubmed_ID	Tissue	Platform
##  GSE18842	Non-small cell lung cancer	44	44	20878980	Lung      	HG-U133 Plus 2.0
##  GSE19188	Non-small cell lung cancer	62	91	20421987	Lung      	HG-U133 Plus 2.0
##  GSE19804	Non-small cell lung cancer	60	60	20802022	Lung      	HG-U133 Plus 2.0
##  GSE50627	Non-small cell lung cancer	6	9	25881239	Lung      	HuGene-10st
##  GSE6044	Non-small cell lung cancer	5	31	18992152	Lung      	Hu-Focus
##===========================================================
##  GSE18842
##  Differential expression analysis with limma
##===========================================================
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE18842", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("10101101010101011010101010101010010110101010101101",
"01000001010101010101010010110101110101010")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
#tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=dim(ex)[1])
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE18842_lmFit_all.txt", row.names=F, sep="\t")
save(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE18842_lmFit_all.rda")
##  GSE18842
##  Differential expression analysis with limma
##===========================================================
dim(ex)
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE19188", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("10000110100010101010110101010101010110101010110100",
"10111011010101101010011011010101010100100110010100",
"10111111010011101110111110101101110111111101011111",
"101010")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
#tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=dim(ex)[1])
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE19188_lmFit_all.txt", row.names=F, sep="\t")
save(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE19188_lmFit_all.rda")
dim(ex)
length(sml)
# load series and platform data from GEO
gset <- getGEO("GSE19804", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "undefined"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(Gu-Gd, Ge-Gd, Gf-Ge, Gi-Gf, Gn-Gi, Gu-Gn, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
#tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=dim(ex)[1])
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE19804_lmFit_all.txt", row.names=F, sep="\t")
save(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE19804_lmFit_all.rda")
dim(ex)
# load series and platform data from GEO
gset <- getGEO("GSE50627", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "undefined"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(Gu-Gd, Ge-Gd, Gf-Ge, Gi-Gf, Gn-Gi, Gu-Gn, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
#write.table(tT, file=stdout(), row.names=F, sep="\t")
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=dim(ex)[1])
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE50627_lmFit_all.txt", row.names=F, sep="\t")
save(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE50627_lmFit_all.rda")
dim(ex)
##===========================================================
##  GSE6044
##  Differential expression analysis with limma
##===========================================================
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE6044", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL201", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "undefined"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(Gu-Gd, Ge-Gd, Gf-Ge, Gi-Gf, Gn-Gi, Gu-Gn, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
#tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","Gene.symbol","Gene.title"))
#write.table(tT, file=stdout(), row.names=F, sep="\t")
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=dim(ex)[1])
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE50627_lmFit_all.txt", row.names=F, sep="\t")
save(tT, file="X:/myGit/shortcourse/ROntoTools/NSCLC_data/GSE50627_lmFit_all.rda")
dim(ex)
length(kpg)
###################################################
### code chunk number 4: rontotools.Rnw:74-77
###################################################
kpg[["path:hsa04110"]]
head(nodes(kpg[["path:hsa04110"]]))
head(edges(kpg[["path:hsa04110"]]))
kpg <- setEdgeWeights(kpg, edgeTypeAttr = "subtype",
edgeWeightByType = list(activation = 1, inhibition = -1,
expression = 1, repression = -1),
defaultWeight = 0)
###################################################
### code chunk number 7: rontotools.Rnw:94-95
###################################################
head(edgeData(kpg[["path:hsa04110"]], attr = "weight"))
#length(kpn)
#[1] 337
kpn[which(names(kpn) %in% "path:hsa05216")]
###################################################
### code chunk number 13: rontotools.Rnw:163-165
###################################################
kpg <- setNodeWeights(kpg, weights = alphaMLG(pv), defaultWeight = 1)
head(nodeWeights(kpg[["path:hsa04110"]]))
peSummary
###################################################
### code chunk number 20: pePathway_twoway_Acc
###################################################
plot(peRes@pathways[["path:hsa05216"]], type = "two.way")
